/*
* This Java source file was generated by the Gradle 'init' task.
*/
package CONVERSOR.BASE64;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Base64;
import java.util.Scanner;

import javax.imageio.ImageIO;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

public class App {
    private static String operacao, caminho, arquivo, tipoConversao;
    private static File foutput, finput;
    public static void main(String[] args) {
        
        operacao      = args[0];
        caminho       = args[1];
        arquivo       = args[2];
        
        if(!caminho.endsWith("/")){
            caminho = caminho + "/";
        }
        
        if(operacao.equals("-e")){
            finput =  new File(caminho + arquivo);
            foutput = new File("./imagem-codificada.txt");
            encodeFileToBase64Binary(finput, foutput);
        }
        else if(operacao.equals("-d")){
            finput = new File(caminho + arquivo);
            foutput = new File("./img-decodificada.jpg");
            decodeBase64toImageFile(finput, foutput);
        }

        else if(operacao.equals("-c")){
            tipoConversao = args[3];
            finput = new File(caminho + arquivo);
            if(!tipoConversao.isEmpty()){
                converterImagem(finput, tipoConversao);
            }
            else{
                System.out.println("Erro ao realizar conversão! Especifique o tipo de arquivo de saída!");
            }
        }

        else if(operacao.equals("-r")){
            finput = new File(caminho + arquivo);
            escalarImagem(finput, 640, 640);
        }
    }
    
    private static void decodeBase64toImageFile(File finput, File foutput) {
        BufferedImage image = null;
        byte[] imageByte;
        
        String img_codificada = lerArquivo(finput);
        
        imageByte = Base64.getDecoder().decode(img_codificada);
        ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
        try {
            image = ImageIO.read(bis);
            bis.close();
            if(image == null){
                System.out.println("!!! Erro ao ler imagem !!!");
                return;
            }
            
            ImageIO.write(image, "jpg", foutput);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    private static void encodeFileToBase64Binary(File finput, File foutput){
        String img_codificada = null;
        try {
            FileInputStream fileInputStreamReader = new FileInputStream(finput);
            byte[] bytes = new byte[(int) finput.length()];
            fileInputStreamReader.read(bytes);
            img_codificada = new String(Base64.getEncoder().encode(bytes));
            fileInputStreamReader.close();    
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        escreverArquivo(foutput, img_codificada);
    }
    
    public static String lerArquivo(File f){
        String conteudo = "";
        try {
            Scanner leitor = new Scanner(f);
            while (leitor.hasNextLine()) {
                conteudo += leitor.nextLine();
            }
            leitor.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return conteudo;
    }
    
    public static void escreverArquivo(File f, String conteudo){
        
        if(!f.exists()){
            criarArquivo(f);
        }
        
        try {
            FileWriter escritor = new FileWriter(f);
            escritor.write(conteudo);
            escritor.close();
            System.out.println("Conteudo escrito no arquivo " + f.getName() + " com sucesso!");
        } catch (IOException e) {
            System.out.println("!!! Erro ao escrever no arquivo. !!!");
            e.printStackTrace();
        }
    }

    public static void criarArquivo(File f){
        try {
            if (f.createNewFile()) {
                System.out.println("File created: " + f.getName());
            }
        } catch (IOException e) {
            System.out.println("!!! Erro ao criar arquivo. !!!");
            e.printStackTrace();
        }
    }

    public static void converterImagem(File finput, String tipoConversao){
        try {
            BufferedImage imagem = ImageIO.read(finput);
            ImageIO.write(imagem, tipoConversao, new File(caminho + "img-convertida." + tipoConversao));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }

    public static void escalarImagem(File finput, int largF, int altF){
        try {
            BufferedImage imagem = ImageIO.read(finput);
            BufferedImage imgRedimensionada = new BufferedImage(largF, altF, BufferedImage.TYPE_INT_RGB);
            Graphics2D graphic = imgRedimensionada.createGraphics();

            System.out.println(String.valueOf(imagem.getWidth()) + " " + String.valueOf(imagem.getHeight()));
            
            graphic.drawImage(imagem, 0, 0, largF, altF, null);
            
            ImageIO.write(imgRedimensionada, "jpg", new File(caminho + "img-redimen.jpg"));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
}
